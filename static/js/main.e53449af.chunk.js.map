{"version":3,"sources":["serviceWorker.js","index.tsx","App.tsx"],"names":["Boolean","window","location","hostname","match","ReactDOM","render","symbol","React","useState","data","setData","useEffect","a","fetch","fetched","Object","json","timestamp","temp","entries","map","load","console","log","Box","position","left","top","right","bottom","name","tickFormat","ms","Date","toLocaleTimeString","hour","minute","replace","scaleName","labelComponent","props","text","Label","valueField","argumentField","CircularProgress","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+RAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,mBCiDG,WAAO,IApBXC,EAoBU,EACCC,IAAMC,SAAmC,IAD1C,mBAChBC,EADgB,KACVC,EADU,KAiBvB,OAdAC,qBAAU,YACE,uCAAG,8BAAAC,EAAA,sEACWC,MAPV,+DAMD,cACLC,EADK,YAE4BC,OAF5B,SAEkDD,EAAQE,OAF1D,wBAEiG,yCAAmB,CAC7HC,UAD0G,KAE1GC,KAF0G,OAAtGT,EAFK,KAEmCU,QAFnC,gBAE6FC,IAF7F,MAMXV,EAAQD,GANG,4CAAH,qDAQVY,KACC,CAACX,IAEJY,QAAQC,IAAId,GAGV,kBAACe,EAAA,EAAD,CAAKC,SAAS,WAAWC,KAAM,EAAGC,IAAK,EAAGC,MAAO,EAAGC,OAAQ,GACzDpB,EACC,kBAAC,IAAD,CAAOA,KAAMA,GACX,kBAAC,IAAD,MAGA,kBAAC,IAAD,CAAYqB,KAAK,MAEjB,kBAAC,IAAD,CAAcC,WAAY,kBAAM,SAACC,GAC/B,OAA4B,IAAIC,KAAKD,GAnC1CE,mBAAmB,QAAS,CACzBC,KAAM,UACNC,OAAQ,YAEXC,QAAQ,MAAO,QAiCZ,kBAAC,IAAD,CACEC,UAAU,IACVC,gBAnDGjC,EAmDmB,KAnDA,SAACkC,GAAgB,IACzCC,EAASD,EAATC,KACR,OACE,kBAAC,IAAUC,MAAX,iBACMF,EADN,CAEEC,KAAMA,EAAOnC,SAiDT,kBAAC,IAAD,CAAYgC,UAAU,IAAIR,KAAK,OAAOa,WAAW,OAAOC,cAAe,cAEvE,kBAAC,IAAD,OAEA,kBAACC,EAAA,EAAD,SDvFM,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.e53449af.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { useEffect } from 'react';\nimport { Box, CircularProgress, Paper } from '@material-ui/core'\nimport {\n  Chart,\n  ArgumentAxis,\n  ValueAxis,\n  LineSeries,\n  ZoomAndPan,\n  Legend,\n} from '@devexpress/dx-react-chart-material-ui';\nimport { string } from 'prop-types';\nimport { ValueScale } from '@devexpress/dx-react-chart';\n\nconst formatDate = (date: Date) => {\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  });\n};\n\nfunction getMsSinceMidnight(d: number) {\n  var e = new Date(d);\n  return d - e.setHours(0, 0, 0, 0);\n}\n\nfunction timeConvert(n: number) {\n  var num = n;\n  var hours = (num / 60);\n  var rhours = Math.floor(hours);\n  var minutes = (hours - rhours) * 60;\n  var rminutes = Math.round(minutes);\n  return rhours + \":\" + rminutes;\n}\n\nconst Label = (symbol: string) => (props: any) => {\n  const { text } = props;\n  return (\n    <ValueAxis.Label\n      {...props}\n      text={text + symbol}\n    />\n  );\n};\n\nconst toCustomLocaleString = (date: Date) =>\n  date\n      .toLocaleTimeString('en-US', {\n          hour: 'numeric',\n          minute: '2-digit'\n      })\n      .replace(/:00/, '');\n\nconst urlForGet = 'http://js-api-bin.herokuapp.com/api/listen-receive-storm/db'; // window.location.search.substr(1);\n\nexport const App = () => {\n  const [data, setData] = React.useState<Record<string, string>[]>([]);\n\n  useEffect(() => {\n    const load = async () => {\n      const fetched = await fetch(urlForGet);\n      const data: Record<string, string>[] = Object.entries((await fetched.json() as Record<string, string>)).map(([key, value]) => ({\n        timestamp: key,\n        temp: value, //parseFloat(value),\n      }));\n      setData(data);\n    };\n    load();\n  }, [setData])\n\n  console.log(data);\n\n  return (\n    <Box position=\"absolute\" left={0} top={0} right={0} bottom={0}>\n      {data ?\n        <Chart data={data}>\n          <Legend\n          />\n\n          <ValueScale name=\"c\" />\n\n          <ArgumentAxis tickFormat={() => (ms: string) => {\n            return toCustomLocaleString(new Date(ms));\n          }} />\n          <ValueAxis\n            scaleName=\"c\"\n            labelComponent={Label(' C')}\n          />\n\n          <LineSeries scaleName=\"c\" name=\"temp\" valueField=\"temp\" argumentField={\"timestamp\"} />\n\n          <ZoomAndPan />\n        </Chart>\n        : <CircularProgress />}\n    </Box>\n  );\n}\n"],"sourceRoot":""}